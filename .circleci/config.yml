version: 2.1

tag_filters: &tag_filters
  filters:
    tags:
      only:
        - /.+/

orbs:
  particle-artifact: particle-iot/particle-artifact@1
  aws-cli: circleci/aws-cli@4.1.2
  docker: circleci/docker@2
  jq: circleci/jq@3

commands:
  build-image:
    parameters:
      image:
        type: string
    steps:
      - checkout
      - particle-artifact/install-deb-dependencies
      - jq/install
      - aws-cli/setup:
          profile_name: default
          region: us-east-1
          role_arn: arn:aws:iam::713073884108:role/circleci-deploy-tachyon-ci
          role_session_name: circleci
          session_duration: "10800"
      - docker/check:
          docker-username: DOCKERHUB_USERNAME
          docker-password: DOCKERHUB_PASSWORD
      - run: sudo apt install -y qemu-user-static binfmt-support
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - run:
          command: docker run --network=host -v $(pwd):/build --rm --privileged ubuntu:24.04 /bin/bash -c '/build/ci-scripts/build.sh << parameters.image >>'
          no_output_timeout: 60m
      - attach_workspace:
          at: release-metadata
      - run:
          name: Load release metadata
          command: |
            cat release-metadata/release.env >> $BASH_ENV
            echo "Loaded release metadata"
      - run:
          name: Create package from raw image
          command: |

            S3_BUCKET=tachyon-ci-particle-io-20241217204603468000000002
            CLOUDFRONT_URL=https://tachyon-ci.particle.io

            export RELEASE_NAME="tachyon-ubuntu-24.04-<< parameters.image >>-$RELEASE_TAG.squashfs.xz"
            ARTIFACT_PATH=$ARTIFACT_BASE_PATH/$RELEASE_NAME
            aws s3 cp build/rootfs.squashfs.xz "s3://$S3_BUCKET/$ARTIFACT_PATH"
            export ARTIFACT_URL=$CLOUDFRONT_URL/$ARTIFACT_PATH

            jq -n '{ release_name: env.RELEASE_NAME, version: env.RELEASE_TAG, variant: "<< parameters.image >>", distribution: "ubuntu", distribution_version: "24.04", artifacts: [ {artifact_url: env.ARTIFACT_URL} ]}' > release-metadata/<< parameters.image >>_metadata.json
      - persist_to_workspace:
          root: release-metadata
          paths:
            - "*.json"

jobs:
  build-headless:
    machine: true
    resource_class: "particle-iot/linux-build-arm64-2404-i8g-large"
    steps:
      - build-image:
          image: headless
  build-desktop:
    machine: true
    resource_class: "particle-iot/linux-build-arm64-2404-i8g-large"
    steps:
      - build-image:
          image: desktop
  generate-metadata:
    machine:
      image: ubuntu-2404:2024.11.1
    steps:
      - checkout
      - run:
          name: "Generate release metadata"
          command: |
            BRANCH_NAME=$(git branch --show-current)
            DEFAULT_BRANCH_NAME=main
            echo "Current branch name: $BRANCH_NAME -- Default branch name: $DEFAULT_BRANCH_NAME"
            PRERELEASE_ARGS=""

            RELEASE_TAG="image-$(git rev-list --count HEAD)-$(git rev-parse --short HEAD)"
            ARTIFACT_BASE_PATH=release
            if [ "$BRANCH_NAME" != "$DEFAULT_BRANCH_NAME" ]; then
              echo "On a non-default branch, marking as prerelease"
              PRERELEASE_ARGS="--prerelease"
              RELEASE_TAG="pre-$(git rev-parse --short HEAD)"
              ARTIFACT_BASE_PATH=prerelease
            fi

            RELEASE_ENV_PATH=release-metadata/release.env
            mkdir -p $(dirname $RELEASE_ENV_PATH)

            echo "export RELEASE_TAG=$RELEASE_TAG" >> $RELEASE_ENV_PATH
            echo "export PRERELEASE_ARGS=$PRERELEASE_ARGS" >> $RELEASE_ENV_PATH
            echo "export ARTIFACT_BASE_PATH=$ARTIFACT_BASE_PATH" >> $RELEASE_ENV_PATH
      - persist_to_workspace:
          root: release-metadata
          paths:
            - "release.env"

  publish:
    machine:
      image: ubuntu-2404:2024.11.1
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y git-lfs make zip
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            touch ~/.ssh/known_hosts
            chmod 600 ~/.ssh/known_hosts
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            echo "Installing github CLI"
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            wget -O semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver && chmod +x semver && sudo mv semver /usr/local/bin
            sudo apt update
            sudo apt install gh
      - jq/install
      - checkout
      - attach_workspace:
          at: release-metadata
      - run:
          name: Load release metadata
          command: |
            cat release-metadata/release.env >> $BASH_ENV
            echo "Loaded release metadata"
      - run:
          name: Generate release metadata
          command: |
            export SCHEMA_URL=https://tachyon-ci.particle.io/schema/artifact_metadata_v1.json
            jq --arg schema_url "$SCHEMA_URL" -s '{"$schema": $schema_url, "builds": .}' release-metadata/*.json > release-metadata/artifact_metadata.json

            RELEASE_NOTES="$(jq -r '.builds[] | "[Download \(.variant) rootfs image from CDN](\(.artifacts[0].artifact_url))"' release-metadata/artifact_metadata.json)"
            echo "export RELEASE_NOTES=\"$RELEASE_NOTES\"" >> $BASH_ENV
      - when:
          condition:
            or:
              - equal: ["main", << pipeline.git.branch >>]
          steps:
            - run:
                name: Create GitHub Release

                command: |
                  gh auth status
                  gh release create $RELEASE_TAG --target $(git rev-parse HEAD) --generate-notes $PRERELEASE_ARGS --notes "$RELEASE_NOTES"
                  gh release upload $RELEASE_TAG release-metadata/artifact_metadata.json
      - when:
          condition:
            not:
              equal: ["main", << pipeline.git.branch >>]
          steps:
            - run:
                name: Add comment to PR with download link
                command: |
                  if [[ ! -z $CIRCLE_PULL_REQUEST ]]; then
                    echo "Adding comment to PR $CIRCLE_PULL_REQUEST"
                    gh pr comment $CIRCLE_PULL_REQUEST -b "Built $(git rev-parse --short HEAD) $RELEASE_NOTES"
                  else
                    echo "No PR number found, skipping"
                  fi

workflows:
  version: 2
  build:
    jobs:
      - generate-metadata:
          <<: *tag_filters
      - build-headless:
          context:
            - particle-ci-private
          <<: *tag_filters
          requires:
            - generate-metadata
      - build-desktop:
          context:
            - particle-ci-private
          <<: *tag_filters
          requires:
            - generate-metadata
      - publish:
          <<: *tag_filters
          requires:
            - build-headless
            - build-desktop
          context: particle-ci-private
